//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.12
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// Alex Lotz (lotz@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//#include <sstream>

template <class Value>
int SmartACE::CommParameterRequest::set(const std::string &key, const Value &value) {
	std::stringstream s;
	s << value;
	bool found = false;
	for(size_t i=0; i<data.items.size(); ++i) {
		if(key.compare(data.items[i].key.c_str()) == 0) {
			found = true;
			data.items[i].values.push_back(s.str().c_str());
			break;
		}
	}
	if(!found) {
		CommParameterIDL::NameValue nv;
		nv.key = key.c_str();
		nv.values.push_back(s.str().c_str());
		data.items.push_back(nv);
	}
	return s.fail()? -1 : 0;
}

template <class Value>
int SmartACE::CommParameterRequest::get(const std::string &key, Value &value) const
{
	bool found = false;
	std::string str_val;
	CommParameterIDL::NameValue nv;
	std::vector<CommParameterIDL::NameValue>::const_iterator it;
	for(it=data.items.begin(); it!=data.items.end(); it++) {
		if(key.compare(it->key.c_str()) == 0) {
			found = true;
			str_val = it->values.back().c_str();
			break;
		}
	}
	if(found) {
		std::stringstream s(str_val);
		s >> value;
		return s.fail()? -1 : 0;
	}
	return -1;
}

template <class Value>
int SmartACE::CommParameterRequest::getList(const std::string &key, std::list<Value> &valueList) const
{
	bool found = false;
	std::list<std::string> str_val_list;
	CommParameterIDL::NameValue nv;
	std::vector<CommParameterIDL::NameValue>::const_iterator it;
	for(it=data.items.begin(); it!=data.items.end(); it++) {
		if(key.compare(it->key.c_str()) == 0) {
			found = true;
			for(unsigned i=0; i<it->values.size(); ++i) {
				str_val_list.push_back(it->values[i].c_str());
			}
			break;
		}
	}
	if(found) {
		int result = 0;
		std::list<std::string>::const_iterator sit;
		for(sit=str_val_list.begin(); sit!=str_val_list.end(); sit++) {
			Value value;
			std::stringstream s(*sit);
			s >> value;
			if(s.fail()) result = -1;
		}
		return result;
	}
	return -1;
}

template <>
inline int SmartACE::CommParameterRequest::get<std::string>(const std::string &key, std::string &value) const
{
	std::string str_val;
	CommParameterIDL::NameValue nv;
	std::vector<CommParameterIDL::NameValue>::const_iterator it;
	for(it=data.items.begin(); it!=data.items.end(); it++) {
		if(key.compare(it->key.c_str()) == 0) {
			value = it->values.back().c_str();
			return 0;
		}
	}
	return -1;
}
template <>
inline int SmartACE::CommParameterRequest::getList<std::string>(const std::string &key, std::list<std::string> &valueList) const
{
	std::string str_val;
	CommParameterIDL::NameValue nv;
	std::vector<CommParameterIDL::NameValue>::const_iterator it;
	for(it=data.items.begin(); it!=data.items.end(); it++) {
		if(key.compare(it->key.c_str()) == 0) {
			for(unsigned i=0; i<it->values.size(); ++i) {
				valueList.push_back(it->values[i].c_str());
			}
			return 0;
		}
	}
	return -1;
}
