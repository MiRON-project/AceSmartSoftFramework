//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.12
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// Alex Lotz (lotz@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2014 Alex Lotz
//
//        lotz@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//
//  This file is part of ACE/SmartSoft.
//
//  ACE/SmartSoft is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  ACE/SmartSoft is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with ACE/SmartSoft.  If not, see <http://www.gnu.org/licenses/>.
//
// --------------------------------------------------------------------------


#ifndef _COMMPARAMETER_ENUM_HH_PARAMRESPONSETYPE
#define _COMMPARAMETER_ENUM_HH_PARAMRESPONSETYPE

#include "smartEnumParamResponseTypeBase.hh"
#include <string>
#include <ostream>

namespace SmartACE
{

class ParamResponseType
{
public:
	enum literal
	{

		BUSY = CommParameterIDL::LITERAL_BUSY,

		INVALID = CommParameterIDL::LITERAL_INVALID,

		OK = CommParameterIDL::LITERAL_OK
	};

	ParamResponseType()
	:	value(INVALID)
	{
	}

	ParamResponseType(literal t)
	{
		value = t;
	}

	operator literal() const
	{
		return value;
	}

	ParamResponseType(CommParameterIDL::ENUM_ParamResponseType t)
	{
		value = (literal) t;
	}

	bool operator ==(ParamResponseType& t)
	{
		return this->value == t.value;
	}

	CommParameterIDL::ENUM_ParamResponseType get_value_idl()
	{
		return (CommParameterIDL::ENUM_ParamResponseType) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case BUSY:
			return "ParamResponseType::BUSY";
			break;

		case INVALID:
			return "ParamResponseType::INVALID";
			break;

		case OK:
			return "ParamResponseType::OK";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const ParamResponseType &e)
{
	os << e.get_string();
	return os;
}

}
#endif
